function reducer(b, acc) {	acc.bonus.economy += b.bonus.economy	acc.bonus.stability += b.bonus.stability	acc.bonus.loyalty += b.bonus.loyalty	acc.bonus.defense += b.bonus.defense	acc.bonus.unrest += b.bonus.unrest	acc.bonus.fame += b.bonus.fame	acc.settlementBonus.crime += b.settlementBonus.crime	acc.settlementBonus.law += b.settlementBonus.law	acc.settlementBonus.society += b.settlementBonus.society	acc.settlementBonus.productivity += b.settlementBonus.productivity	acc.settlementBonus.lore += b.settlementBonus.lore}class Accumulator {	bonus = {		economy: 0,		stability: 0,		loyalty: 0,		defense: 0,		unrest: 0,		fame: 0	}	settlementBonus = {		lore: 0,		productivity: 0,		society: 0,		law: 0,		crime: 0	}}class HexData {	name = ""	constructor(name) {		this.name = name	}	data = {		buildings: [[], [], [], []]	}	settlement = null;	createSettlement() {		this.settlement = new Settlement();	}	ownedBy = 0;}class Settlement {	districts = [new District()]	getModifiers() {		const acc = new Accumulator()		return this.districts.forEach((district) => {			district.getModifiers(acc)		})	}}class District {	buildingGrid = new BuildingGrid()	getModifiers(accumulator) {		return this.buildingGrid.getModifiers(accumulator)	}}class BuildingGrid {	buildings = []	getModifiers(accumulator) {		return this.buildings.reduce(reducer, accumulator)	}}export default HexData